movie
movie [2,1]
movie [,3]
moviedf <- data.frame(movie)
moviedf
movie [3,5]
movie [5,3]
movie [3,5] <-NA
movie [5,3] <-NA
movie
movie [,3]
moviedf$F2
mean(moviedf$F2)
mean(moviedf$F2, na.rm=TRUE)
as.numeric(moviedf$F2)
mean(as.numeric(moviedf$F2), na.rm=TRUE)
moviedf$F2
moviedfNew <- data.frame(movie, stringsAsFactors = FALSE)
moviedfNew
as.numeric(moviedfNew$F4)
mean(as.numeric(moviedfNew$F4), na.rm=TRUE)
moviedfNew$F4
as.numeric(moviedfNew$F2)
moviedfNew$F2 <- as.numeric(moviedfNew$F2)
moviedfNew
moviedfNew[,4:5] <- lapply(moviedfNew[,4:5],as.numeric)
moviedfNew
moviedfNew$F1 <- as.numeric(as.logical(moviedfNew$F1))
moviedfNew
as.numeric(moviedfNew$F1)
mean(as.numeric(moviedfNew$F1 * 10), na.rm=TRUE)
moviedfNew
as.numeric(moviedfNew$F3)
mean(as.numeric(moviedfNew$F3), na.rm=TRUE)
moviedfNew
moviedfNew
scale(moviedfNew)
scale(as.numeric(moviedfNew))
moviedfNew
colMeans(moviedfNew, na.rm = TRUE)
we <- as.numeric(moviedfNew)
as.data.frame(lapply(moviefdNew, as.numeric))
movie <- list()
moviedf <- data.frame()
## Gender is een vector--> een rij met hetzelfde type waarde ( Allemaal int, string, bool, double)
gender <- c("M", "F", "M","M", "F", "F", "F")
gender
length(gender)
F1 <- c(TRUE,TRUE,FALSE,FALSE,TRUE,FALSE,FALSE)
F2<- c(5,3,5,2,2,3,3)
F2
F3<- c(3,5,1,8,4,2,6)
F3
F4<- c(5,5,6,5,5,6,5)
F4
F3+F4
movie <- cbind(gender, F1)
movie
movie <- cbind(movie, F2)
movie
movie <- cbind(movie, F3)
movie
movie <- cbind(movie, F4)
movie
dim(movie)
newRow <- c("M", "FALSE", "1", "3", "5")
movie <- rbind(movie, newRow)
movie
movie [2,1]
movie [,3]
moviedf <- data.frame(movie)
moviedf
movie [3,5]
movie [5,3]
movie [3,5] <-NA
movie [5,3] <-NA
movie
movie [,3]
moviedf$F2
mean(moviedf$F2)
mean(moviedf$F2, na.rm=TRUE)
as.numeric(moviedf$F2)
mean(as.numeric(moviedf$F2), na.rm=TRUE)
moviedf$F2
moviedfNew <- data.frame(movie, stringsAsFactors = FALSE)
moviedfNew
as.numeric(moviedfNew$F4)
mean(as.numeric(moviedfNew$F4), na.rm=TRUE)
moviedfNew$F4
as.numeric(moviedfNew$F2)
moviedfNew$F2 <- as.numeric(moviedfNew$F2)
moviedfNew
moviedfNew[,4:5] <- lapply(moviedfNew[,4:5],as.numeric)
moviedfNew
moviedfNew$F1 <- as.numeric(as.logical(moviedfNew$F1))
moviedfNew
as.numeric(moviedfNew$F1)
mean(as.numeric(moviedfNew$F1 * 10), na.rm=TRUE)
moviedfNew
as.numeric(moviedfNew$F3)
mean(as.numeric(moviedfNew$F3), na.rm=TRUE)
moviedfNew
lapply(moviedfNew, as.numeric)
moviedfNew
scale(moviedfNew)
moviedfNew <- lapply(moviedfNew, as.numeric)
moviedfNew
mean(moviedf$F2)
mean(moviedf$F2, na.rm=TRUE)
as.numeric(moviedf$F2)
scale()
scale(moviedfNew)
## needed for datamanipulation
install.packages("dplyr")
## needed for db connection
install.packages("DBI")
install.packages("rJava")
install.packages("RJDBC")
## needed for sql interface on the dataframe
install.packages("sqldf")
## load into memory
library(dplyr)
library(DBI)
library(rJava)
library(RJDBC)
library(sqldf)
drv <- JDBC("com.mysql.jdbc.Driver", "C:/Program Files/MySQL/mysql-connector-java-5.1.45/mysql-connector-java-5.1.45-bin.jar")
conn <- dbConnect(drv, "jdbc:mysql://localhost/zipcodedwh", "root", "T@nte000", useSSL=FALSE)
dbListTables(conn)
getwd()
setwd("C:/Users/poden/surfdrive/10 HvA/01 DataProcessing and DataStorage/01 DataBase/")
population <- read.csv("population.csv", sep=",")
names(population)
population <- population [,! names(population) %in% c("loc","X_id")]
population$date_skey <- 20170101
drv <- JDBC("com.mysql.jdbc.Driver", "C:/Program Files/MySQL/mysql-connector-java-5.1.45/mysql-connector-java-5.1.45-bin.jar")
conn <- dbConnect(drv, "jdbc:mysql://localhost/zipcodedwh", "root", "T@nte000", useSSL=FALSE)
dbListTables(conn)
dbWriteTable(conn,name="fact_population", value=population , append=FALSE, row.names=FALSE, overwrite=FALSE)
rn <- sample(1:4000, 1)
population$pop <- population$pop + sample(1:4000,1)
## grow <- sample.int(4000, nrow(population), replace=TRUE)
##  population$pop <- population$pop + grow
population$date_skey <-20180101
dbWriteTable(conn,name="fact_population", value=population , append=TRUE, row.names=FALSE, overwrite=FALSE)
sql_string <- "SELECT * FROM FACT_POPULATION"
populationHistory <- dbGetQuery(conn,"SELECT * FROM FACT_POPULATION" )
library(tidyr)
populationHistoryNew <- spread(populationHistory, date_skey, pop)
sql_string <- "CALL GetPopulationByState ('MA')"
populationHistoryMA <- dbGetQuery(conn,sql_string)
plot(as.factor(populationHistoryMA$city) ,populationHistoryMA$pop)
dbWriteTable(conn,name="fact_population", value=population , append=FALSE, row.names=FALSE, overwrite=FALSE)
rn <- sample(1:4000, 1)
population$pop <- population$pop + sample(1:4000,1)
## grow <- sample.int(4000, nrow(population), replace=TRUE)
##  population$pop <- population$pop + grow
population$date_skey <-20180101
dbWriteTable(conn,name="fact_population", value=population , append=TRUE, row.names=FALSE, overwrite=FALSE)
sql_string <- "SELECT * FROM FACT_POPULATION"
populationHistory <- dbGetQuery(conn,"SELECT * FROM FACT_POPULATION" )
library(tidyr)
populationHistoryNew <- spread(populationHistory, date_skey, pop)
sql_string <- "CALL GetPopulationByState ('MA')"
populationHistoryMA <- dbGetQuery(conn,sql_string)
plot(as.factor(populationHistoryMA$city) ,populationHistoryMA$pop)
## needed for datamanipulation
install.packages("dplyr")
## needed for db connection
install.packages("DBI")
install.packages("rJava")
install.packages("RJDBC")
## needed for sql interface on the dataframe
install.packages("sqldf")
## load into memory
library(dplyr)
library(DBI)
library(rJava)
library(RJDBC)
library(sqldf)
drv <- JDBC("com.mysql.jdbc.Driver", "C:/Program Files/MySQL/mysql-connector-java-5.1.45/mysql-connector-java-5.1.45-bin.jar")
conn <- dbConnect(drv, "jdbc:mysql://localhost/zipcodedwh", "root", "T@nte000", useSSL=FALSE)
dbListTables(conn)
getwd()
setwd("C:/Users/poden/surfdrive/10 HvA/01 DataProcessing and DataStorage/01 DataBase/")
population <- read.csv("population.csv", sep=",")
names(population)
population <- population [,! names(population) %in% c("loc","X_id")]
population$date_skey <- 20170101
drv <- JDBC("com.mysql.jdbc.Driver", "C:/Program Files/MySQL/mysql-connector-java-5.1.45/mysql-connector-java-5.1.45-bin.jar")
conn <- dbConnect(drv, "jdbc:mysql://localhost/zipcodedwh", "root", "T@nte000", useSSL=FALSE)
dbListTables(conn)
dbWriteTable(conn,name="fact_population", value=population , append=FALSE, row.names=FALSE, overwrite=FALSE)
rn <- sample(1:4000, 1)
population$pop <- population$pop + sample(1:4000,1)
## grow <- sample.int(4000, nrow(population), replace=TRUE)
##  population$pop <- population$pop + grow
population$date_skey <-20180101
dbWriteTable(conn,name="fact_population", value=population , append=TRUE, row.names=FALSE, overwrite=FALSE)
sql_string <- "SELECT * FROM FACT_POPULATION"
populationHistory <- dbGetQuery(conn,"SELECT * FROM FACT_POPULATION" )
library(tidyr)
populationHistoryNew <- spread(populationHistory, date_skey, pop)
sql_string <- "CALL GetPopulationByState ('MA')"
populationHistoryMA <- dbGetQuery(conn,sql_string)
plot(as.factor(populationHistoryMA$city) ,populationHistoryMA$pop)
population <- population [,! names(population) %in% c("loc","X_id")]
#' @return Returns a dataframe with all
#' @export
CHIEF_R_RDW_SELECT<- function (nrTable,username, password, token){
InstallCandidates <-c("DBI","rJava","RJDBC","dplyr")
toInstall<-InstallCandidates[!InstallCandidates %in% library()$results[,1]]
if(length(toInstall) !=0){install.packages(toInstall,repos="http://cran.r-project.org")}
lapply(InstallCandidates,library,character.only=TRUE)
rm("InstallCandidates","toInstall")
spName <- "[01_RDW_SELECT_SEC]"
options(java.parameters = "-Xmx2g")
drv <- JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver", "/opt/sqljdbc_3.0/sqljdbc4.jar")
conn <- dbConnect(drv, "jdbc:sqlserver://145.92.162.226;databaseName=CHIEF_R;user=PackageResearch;password=Kameel32")
# Kijken of er al een key gemaakt is voor gebruiker
sqlText <- paste(spName, paste(nrTable,username,password, token,sep=","))
data <- dbGetQuery(conn,sqlText)
return(data)
dbDisconnect(conn)
}
#' @return Returns a dataframe with all
#' @export
CHIEF_R_RDW_SELECT<- function (nrTable,username, password, token){
InstallCandidates <-c("DBI","rJava","RJDBC","dplyr")
toInstall<-InstallCandidates[!InstallCandidates %in% library()$results[,1]]
if(length(toInstall) !=0){install.packages(toInstall,repos="http://cran.r-project.org")}
lapply(InstallCandidates,library,character.only=TRUE)
rm("InstallCandidates","toInstall")
spName <- "[01_RDW_SELECT_SEC]"
options(java.parameters = "-Xmx2g")
drv <- JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver", "/opt/sqljdbc_3.0/sqljdbc4.jar")
conn <- dbConnect(drv, "jdbc:sqlserver://145.92.162.226;databaseName=CHIEF_R;user=PackageResearch;password=Kameel32")
# Kijken of er al een key gemaakt is voor gebruiker
sqlText <- paste(spName, paste(nrTable,username,password, token,sep=","))
data <- dbGetQuery(conn,sqlText)
return(data)
dbDisconnect(conn)
}
#' @return Returns a dataframe with all
#' @export
CHIEF_R_RDW_SELECT<- function (nrTable,username, password, token){
InstallCandidates <-c("DBI","rJava","RJDBC","dplyr")
toInstall<-InstallCandidates[!InstallCandidates %in% library()$results[,1]]
if(length(toInstall) !=0){install.packages(toInstall,repos="http://cran.r-project.org")}
lapply(InstallCandidates,library,character.only=TRUE)
rm("InstallCandidates","toInstall")
spName <- "[01_RDW_SELECT_SEC]"
options(java.parameters = "-Xmx2g")
drv <- JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver", "/opt/sqljdbc_3.0/sqljdbc4.jar")
conn <- dbConnect(drv, "jdbc:sqlserver://145.92.162.226;databaseName=CHIEF_R;user=PackageResearch;password=Kameel32")
# Kijken of er al een key gemaakt is voor gebruiker
sqlText <- paste(spName, paste(nrTable,username,password, token,sep=","))
data <- dbGetQuery(conn,sqlText)
return(data)
dbDisconnect(conn)
}
#' @return Returns a dataframe with all
#' @export
CHIEF_R_RDW_SELECT<- function (nrTable,username, password, token){
InstallCandidates <-c("DBI","rJava","RJDBC","dplyr")
toInstall<-InstallCandidates[!InstallCandidates %in% library()$results[,1]]
if(length(toInstall) !=0){install.packages(toInstall,repos="http://cran.r-project.org")}
lapply(InstallCandidates,library,character.only=TRUE)
rm("InstallCandidates","toInstall")
spName <- "[01_RDW_SELECT_SEC]"
options(java.parameters = "-Xmx2g")
drv <- JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver", "/opt/sqljdbc_3.0/sqljdbc4.jar")
conn <- dbConnect(drv, "jdbc:sqlserver://145.92.162.226;databaseName=CHIEF_R;user=PackageResearch;password=Kameel32")
# Kijken of er al een key gemaakt is voor gebruiker
sqlText <- paste(spName, paste(nrTable,username,password, token,sep=","))
data <- dbGetQuery(conn,sqlText)
return(data)
dbDisconnect(conn)
}
return(data)
dbDisconnect(conn)
library(elastic)
library(jsonlite)
library(dplyr)
connect()
setwd("C:/Users/poden/surfdrive/10 HvA/01 DataProcessing and DataStorage/04 ElasticSearch/DataSets/")
shiny::runApp('D:/Jedakiller/Big Data/Test/TestPlot')
#' @return Returns a dataframe with all
#' @export
CHIEF_R_RDW_SELECT<- function (nrTable,username, password, token){
InstallCandidates <-c("DBI","rJava","RJDBC","dplyr")
toInstall<-InstallCandidates[!InstallCandidates %in% library()$results[,1]]
if(length(toInstall) !=0){install.packages(toInstall,repos="http://cran.r-project.org")}
lapply(InstallCandidates,library,character.only=TRUE)
rm("InstallCandidates","toInstall")
spName <- "[01_RDW_SELECT_SEC]"
options(java.parameters = "-Xmx2g")
drv <- JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver", "/opt/sqljdbc_3.0/sqljdbc4.jar")
conn <- dbConnect(drv, "jdbc:sqlserver://145.92.162.226;databaseName=CHIEF_R;user=PackageResearch;password=Kameel32")
# Kijken of er al een key gemaakt is voor gebruiker
sqlText <- paste(spName, paste(nrTable,username,password, token,sep=","))
data <- dbGetQuery(conn,sqlText)
return(data)
dbDisconnect(conn)
}
#' @return Returns a dataframe with all
#' @export
CHIEF_R_RDW_SELECT<- function (nrTable,username, password, token){
InstallCandidates <-c("DBI","rJava","RJDBC","dplyr")
toInstall<-InstallCandidates[!InstallCandidates %in% library()$results[,1]]
if(length(toInstall) !=0){install.packages(toInstall,repos="http://cran.r-project.org")}
lapply(InstallCandidates,library,character.only=TRUE)
rm("InstallCandidates","toInstall")
spName <- "[01_RDW_SELECT_SEC]"
options(java.parameters = "-Xmx2g")
drv <- JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver", "/opt/sqljdbc_3.0/sqljdbc4.jar")
conn <- dbConnect(drv, "jdbc:sqlserver://145.92.162.226;databaseName=CHIEF_R;user=PackageResearch;password=Kameel32")
# Kijken of er al een key gemaakt is voor gebruiker
sqlText <- paste(spName, paste(nrTable,username,password, token,sep=","))
data <- dbGetQuery(conn,sqlText)
return(data)
dbDisconnect(conn)
}
#' @return Returns a dataframe with all
#' @export
CHIEF_R_RDW_SELECT<- function (nrTable,username, password, token){
InstallCandidates <-c("DBI","rJava","RJDBC","dplyr")
toInstall<-InstallCandidates[!InstallCandidates %in% library()$results[,1]]
if(length(toInstall) !=0){install.packages(toInstall,repos="http://cran.r-project.org")}
lapply(InstallCandidates,library,character.only=TRUE)
rm("InstallCandidates","toInstall")
spName <- "[01_RDW_SELECT_SEC]"
options(java.parameters = "-Xmx2g")
drv <- JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver", "/opt/sqljdbc_3.0/sqljdbc4.jar")
conn <- dbConnect(drv, "jdbc:sqlserver://145.92.162.226;databaseName=CHIEF_R;user=PackageResearch;password=Kameel32")
# Kijken of er al een key gemaakt is voor gebruiker
sqlText <- paste(spName, paste(nrTable,username,password, token,sep=","))
data <- dbGetQuery(conn,sqlText)
return(data)
dbDisconnect(conn)
}
user <- "danieljrif"
password <-"ATqtDumS2"
token <-"677671"
dftest <- CHIEF_R_RDW_SELECT(5,user,password, token)
dftest <- CHIEF_R_RDW_SELECT(5,user,password, token)
dbDisconnect(conn)
#' @return Returns a dataframe with all
#' @export
CHIEF_R_RDW_SELECT<- function (nrTable,username, password, token){
InstallCandidates <-c("DBI","rJava","RJDBC","dplyr")
toInstall<-InstallCandidates[!InstallCandidates %in% library()$results[,1]]
if(length(toInstall) !=0){install.packages(toInstall,repos="http://cran.r-project.org")}
lapply(InstallCandidates,library,character.only=TRUE)
rm("InstallCandidates","toInstall")
spName <- "[01_RDW_SELECT_SEC]"
options(java.parameters = "-Xmx2g")
drv <- JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver", "/opt/sqljdbc_3.0/sqljdbc4.jar")
conn <- dbConnect(drv, "jdbc:sqlserver://145.92.162.226;databaseName=CHIEF_R;user=PackageResearch;password=Kameel32")
# Kijken of er al een key gemaakt is voor gebruiker
sqlText <- paste(spName, paste(nrTable,username,password, token,sep=","))
data <- dbGetQuery(conn,sqlText)
return(data)
dbDisconnect(conn)
}
dftest <- CHIEF_R_RDW_SELECT(5,user,password, token)
user <- "danieljrif"
password <-"ATqtDumS2"
token <-"677671"
dftest <- CHIEF_R_RDW_SELECT(5,user,password, token)
#' @return Returns a dataframe with all
#' @export
CHIEF_R_RDW_SELECT<- function (nrTable,username, password, token){
InstallCandidates <-c("DBI","rJava","RJDBC","dplyr")
toInstall<-InstallCandidates[!InstallCandidates %in% library()$results[,1]]
if(length(toInstall) !=0){install.packages(toInstall,repos="http://cran.r-project.org")}
lapply(InstallCandidates,library,character.only=TRUE)
rm("InstallCandidates","toInstall")
spName <- "[01_RDW_SELECT_SEC]"
options(java.parameters = "-Xmx2g")
drv <- JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver", "/opt/sqljdbc_3.0/sqljdbc4.jar")
conn <- dbConnect(drv, "jdbc:sqlserver://145.92.162.226;databaseName=CHIEF_R;user=PackageResearch;password=Kameel32")
# Kijken of er al een key gemaakt is voor gebruiker
sqlText <- paste(spName, paste(nrTable,username,password, token,sep=","))
data <- dbGetQuery(conn,sqlText)
return(data)
dbDisconnect(conn)
}
dftest <- CHIEF_R_RDW_SELECT(5,user,password, token)
#' @return Returns a dataframe with all
#' @export
CHIEF_R_RDW_SELECT<- function (nrTable,username, password, token){
InstallCandidates <-c("DBI","rJava","RJDBC","dplyr")
toInstall<-InstallCandidates[!InstallCandidates %in% library()$results[,1]]
if(length(toInstall) !=0){install.packages(toInstall,repos="http://cran.r-project.org")}
lapply(InstallCandidates,library,character.only=TRUE)
rm("InstallCandidates","toInstall")
spName <- "[01_RDW_SELECT_SEC]"
options(java.parameters = "-Xmx2g")
#drv <- JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver", "/opt/sqljdbc_3.0/sqljdbc4.jar")
conn <- dbConnect(drv, "jdbc:sqlserver://145.92.162.226;databaseName=CHIEF_R;user=PackageResearch;password=Kameel32")
# Kijken of er al een key gemaakt is voor gebruiker
sqlText <- paste(spName, paste(nrTable,username,password, token,sep=","))
data <- dbGetQuery(conn,sqlText)
return(data)
dbDisconnect(conn)
}
user <- "danieljrif"
password <-"ATqtDumS2"
token <-"677671"
dftest <- CHIEF_R_RDW_SELECT(5,user,password, token)
#' @return Returns a dataframe with all
#' @export
CHIEF_R_RDW_SELECT<- function (nrTable,username, password, token){
InstallCandidates <-c("DBI","rJava","RJDBC","dplyr")
toInstall<-InstallCandidates[!InstallCandidates %in% library()$results[,1]]
if(length(toInstall) !=0){install.packages(toInstall,repos="http://cran.r-project.org")}
lapply(InstallCandidates,library,character.only=TRUE)
rm("InstallCandidates","toInstall")
spName <- "[01_RDW_SELECT_SEC]"
options(java.parameters = "-Xmx2g")
drv <- JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver", "/opt/sqljdbc_3.0/sqljdbc4.jar")
conn <- dbConnect(drv, "jdbc:sqlserver://145.92.162.226;databaseName=CHIEF_R;user=PackageResearch;password=Kameel32")
# Kijken of er al een key gemaakt is voor gebruiker
sqlText <- paste(spName, paste(nrTable,username,password, token,sep=","))
data <- dbGetQuery(conn,sqlText)
return(data)
dbDisconnect(conn)
}
user <- "danieljrif"
password <-"ATqtDumS2"
token <-"677671"
dftest <- CHIEF_R_RDW_SELECT(5,user,password, token)
install.packages("DBI")
install.packages("rJava")
install.packages("RJDBC")
install.packages("dplyr")
install.packages("DBI")
#' @return Returns a dataframe with all
#' @export
CHIEF_R_RDW_SELECT<- function (nrTable,username, password, token){
InstallCandidates <-c("DBI","rJava","RJDBC","dplyr")
toInstall<-InstallCandidates[!InstallCandidates %in% library()$results[,1]]
if(length(toInstall) !=0){install.packages(toInstall,repos="http://cran.r-project.org")}
lapply(InstallCandidates,library,character.only=TRUE)
rm("InstallCandidates","toInstall")
spName <- "[01_RDW_SELECT_SEC]"
options(java.parameters = "-Xmx2g")
drv <- JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver", "/opt/sqljdbc_3.0/sqljdbc4.jar")
conn <- dbConnect(drv, "jdbc:sqlserver://145.92.162.226;databaseName=CHIEF_R;user=PackageResearch;password=Kameel32")
# Kijken of er al een key gemaakt is voor gebruiker
sqlText <- paste(spName, paste(nrTable,username,password, token,sep=","))
data <- dbGetQuery(conn,sqlText)
return(data)
dbDisconnect(conn)
}
user <- "danieljrif"
password <-"ATqtDumS2"
token <-"677671"
dftest <- CHIEF_R_RDW_SELECT(5,user,password, token)
install.packages("DBI")
install.packages("rJava")
install.packages("RJDBC")
install.packages("dplyr")
#' @return Returns a dataframe with all
#' @export
CHIEF_R_RDW_SELECT<- function (nrTable,username, password, token){
InstallCandidates <-c("DBI","rJava","RJDBC","dplyr")
toInstall<-InstallCandidates[!InstallCandidates %in% library()$results[,1]]
if(length(toInstall) !=0){install.packages(toInstall,repos="http://cran.r-project.org")}
lapply(InstallCandidates,library,character.only=TRUE)
rm("InstallCandidates","toInstall")
spName <- "[01_RDW_SELECT_SEC]"
options(java.parameters = "-Xmx2g")
drv <- JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver", "/opt/sqljdbc_3.0/sqljdbc4.jar")
conn <- dbConnect(drv, "jdbc:sqlserver://145.92.162.226;databaseName=CHIEF_R;user=PackageResearch;password=Kameel32")
# Kijken of er al een key gemaakt is voor gebruiker
sqlText <- paste(spName, paste(nrTable,username,password, token,sep=","))
data <- dbGetQuery(conn,sqlText)
return(data)
dbDisconnect(conn)
}
user <- "danieljrif"
password <-"ATqtDumS2"
token <-"677671"
dftest <- CHIEF_R_RDW_SELECT(5,user,password, token)
dftest <- CHIEF_R_RDW_SELECT(5,user,password, token)
#' @return Returns a dataframe with all
#' @export
CHIEF_R_RDW_SELECT<- function (nrTable,username, password, token){
InstallCandidates <-c("DBI","rJava","RJDBC","dplyr")
toInstall<-InstallCandidates[!InstallCandidates %in% library()$results[,1]]
if(length(toInstall) !=0){install.packages(toInstall,repos="http://cran.r-project.org")}
lapply(InstallCandidates,library,character.only=TRUE)
rm("InstallCandidates","toInstall")
spName <- "[01_RDW_SELECT_SEC]"
options(java.parameters = "-Xmx2g")
drv <- JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver", "/opt/sqljdbc_3.0/sqljdbc4.jar")
conn <- dbConnect(drv, "jdbc:sqlserver://145.92.162.226;databaseName=CHIEF_R;user=PackageResearch;password=Kameel32")
# Kijken of er al een key gemaakt is voor gebruiker
sqlText <- paste(spName, paste(nrTable,username,password, token,sep=","))
data <- dbGetQuery(conn,sqlText)
return(data)
dbDisconnect(conn)
}
user <- "stefandegr"
password <-"bNjwQKrS0"
token <-"724195"
dftest <- CHIEF_R_RDW_SELECT(5,user,password, token)
rm(dat,movie,moviedf,moviedfNew,scaled.dat)
shiny::runApp('D:/HVA/Jaar 2/Big_Data/Project/Shiny/WebApp/BG')
?mutate()
